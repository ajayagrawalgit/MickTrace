Metadata-Version: 2.4
Name: micktrace
Version: 1.0.0
Summary: The world's most advanced Python logging library - async-native, structured, zero-config, library-first design
Home-page: https://github.com/ajayagrawalgit/micktrace
Author: Ajay Agrawal
Author-email: Ajay Agrawal <ajay@micktrace.dev>
Maintainer-email: Ajay Agrawal <ajay@micktrace.dev>
License: MIT
Project-URL: Homepage, https://github.com/ajayagrawalgit/micktrace
Project-URL: Repository, https://github.com/ajayagrawalgit/micktrace
Project-URL: Documentation, https://github.com/ajayagrawalgit/micktrace#readme
Project-URL: Issues, https://github.com/ajayagrawalgit/micktrace/issues
Project-URL: Changelog, https://github.com/ajayagrawalgit/micktrace/blob/main/CHANGELOG.md
Keywords: logging,async,structured,observability,tracing,performance,library-first,zero-config,context,json,logfmt
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Logging
Classifier: Topic :: Software Development :: Debuggers
Classifier: Typing :: Typed
Classifier: Environment :: Console
Classifier: Framework :: AsyncIO
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: typing-extensions>=4.0.0; python_version < "3.11"
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0; extra == "dev"
Requires-Dist: black>=22.0; extra == "dev"
Requires-Dist: mypy>=1.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Requires-Dist: isort>=5.0; extra == "dev"
Provides-Extra: cloud
Requires-Dist: aioboto3>=11.3.0; extra == "cloud"
Requires-Dist: botocore>=1.31.62; extra == "cloud"
Requires-Dist: azure-monitor-ingestion>=1.0.0b5; extra == "cloud"
Requires-Dist: azure-core>=1.29.5; extra == "cloud"
Requires-Dist: google-cloud-logging>=3.8.0; extra == "cloud"
Provides-Extra: performance
Requires-Dist: orjson>=3.8.0; extra == "performance"
Requires-Dist: msgpack>=1.0.0; extra == "performance"
Provides-Extra: rich
Requires-Dist: rich>=13.0.0; extra == "rich"
Provides-Extra: all
Requires-Dist: micktrace[cloud,dev,performance,rich]; extra == "all"
Dynamic: author
Dynamic: home-page
Dynamic: license-file

# Micktrace üöÄ

**The world's most advanced Python logging library - Zero shortcomings, perfect design**

[![Python](https://img.shields.io/pypi/pyversions/micktrace.svg)](https://pypi.org/project/micktrace/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

## üéØ Why Micktrace?

**üî• Zero Configuration for Libraries** - Libraries can log immediately without any setup. Only applications control logging output.

**‚ö° Async-Native Performance** - Sub-microsecond overhead when disabled, non-blocking I/O, built-in async support.

**üìä Structured by Default** - Every log is structured with type safety and automatic context injection.

**üèóÔ∏è Library-First Design** - No global state pollution. Multiple libraries can use Micktrace without conflicts.

**üöÄ Future-Proof Architecture** - Built for modern Python with full type hints and comprehensive error handling.

## üöÄ Quick Start

```python
import micktrace

# For libraries - zero config needed, works immediately  
logger = micktrace.get_logger(__name__)
logger.info("Library initialized", component="auth", version="1.2.3")

# For applications - simple activation
micktrace.configure(level="INFO", format="structured")
```

## ‚ú® Key Features

### üî• Performance First
- **Sub-microsecond overhead** when logging is disabled
- **Async-native** with automatic context propagation
- **Memory efficient** with intelligent batching
### Context Management
```python
# Add context to all logs in a scope
with micktrace.context(request_id="req_123", user_id=456):
    logger.info("Processing request")  # Includes request_id and user_id
    await process_data()  # All nested logs include context
```
```python
import micktrace

logger = micktrace.get_logger(__name__)

# Create bound logger with common context
service_logger = logger.bind(service="auth", version="1.0.0")
service_logger.info("Service started", port=8080)  # Includes service and version

# Chain binding for more specific context
request_logger = service_logger.bind(request_id="req_456")
request_logger.info("User authenticated")  # Includes service, version, and request_id
```

### Library Integration
```python
# In your library code - works immediately, zero setup
import micktrace

logger = micktrace.get_logger(__name__)

def library_function():
    logger.info("Library function called", function="library_function")
    # Logs are only emitted if the application configures micktrace
    # Otherwise, zero overhead
```

## üß™ Testing Support

```python
import micktrace
from micktrace.handlers import MemoryHandler

def test_my_function():
    handler = MemoryHandler()
    # Configure micktrace to use memory handler for testing

    my_function()

    # Assert on logged records
    records = handler.get_records()
    assert len(records) == 1
    assert records[0].level == "INFO"
    assert records[0].data["user_id"] == 123
```

## üé® Advanced Features

### Exception Logging
```python
try:
    risky_operation()
except Exception:
    logger.exception("Operation failed", 
                    operation="risky_operation",
                    retry_count=3,
                    will_retry=True)
```

### Performance Monitoring
```python
import time
import micktrace

logger = micktrace.get_logger(__name__)

start_time = time.time()
try:
    result = expensive_operation()
    logger.info("Operation completed",
                operation="expensive_operation", 
                duration_ms=int((time.time() - start_time) * 1000),
                result_size=len(result))
except Exception as e:
    logger.error("Operation failed",
                operation="expensive_operation",
                duration_ms=int((time.time() - start_time) * 1000),
                error_type=type(e).__name__)
```

### Configuration Options
```python
# Environment-based configuration
import os
os.environ["MICKTRACE_LEVEL"] = "INFO"
os.environ["MICKTRACE_FORMAT"] = "json"
os.environ["MICKTRACE_HANDLERS"] = "console,file"

# Programmatic configuration
micktrace.configure(
    level="INFO",
    format="structured",  # json, logfmt, structured, simple
    handlers=["console"],
    service="my-service",
    version="1.0.0",
    environment="production"
)
```

## üìö Output Formats

### Structured (Default)
```
2023-09-26 10:15:30 [    INFO] my_app: User logged in user_id=123 action=login success=True
```

### JSON
```json
{"timestamp": 1695720930.123, "level": "INFO", "logger_name": "my_app", "message": "User logged in", "data": {"user_id": 123, "action": "login", "success": true}, "trace_id": "550e8400-e29b-41d4-a716-446655440000"}
```

### Logfmt
```
timestamp=1695720930.123 level=INFO logger=my_app message="User logged in" user_id=123 action=login success=true trace_id=550e8400-e29b-41d4-a716-446655440000
```

## üèÜ Why Better Than Alternatives

| Feature | stdlib logging | loguru | structlog | micktrace |
|---------|---------------|--------|-----------|-----------|
| Library-friendly | ‚ùå | ‚ùå | ‚ö†Ô∏è | ‚úÖ |
| Zero config | ‚ùå | ‚úÖ | ‚ùå | ‚úÖ |
| Structured logging | ‚ùå | ‚ö†Ô∏è | ‚úÖ | ‚úÖ |
| Type safety | ‚ùå | ‚ùå | ‚ö†Ô∏è | ‚úÖ |
| Async native | ‚ùå | ‚ùå | ‚ùå | ‚úÖ |
| Context propagation | ‚ùå | ‚ùå | ‚úÖ | ‚úÖ |
| Testing utilities | ‚ùå | ‚ùå | ‚ùå | ‚úÖ |
| Error handling | ‚ö†Ô∏è | ‚úÖ | ‚ö†Ô∏è | ‚úÖ |
| Performance | ‚ö†Ô∏è | ‚úÖ | ‚ö†Ô∏è | ‚úÖ |

## üîß Configuration Reference

### Environment Variables
- `MICKTRACE_LEVEL`: Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
- `MICKTRACE_FORMAT`: Output format (json, logfmt, structured, simple)
- `MICKTRACE_ENABLED`: Enable/disable logging (true/false)
- `MICKTRACE_HANDLERS`: Comma-separated list of handlers
- `MICKTRACE_SERVICE`: Service name for all logs
- `MICKTRACE_VERSION`: Service version for all logs
- `MICKTRACE_ENVIRONMENT`: Environment name (dev, staging, prod)

### Programmatic Configuration
```python
micktrace.configure(
    level="INFO",              # Minimum log level
    format="json",             # Output format
    enabled=True,              # Enable/disable logging
    handlers=["console"],      # List of handlers
    service="my-service",      # Service name
    version="1.0.0",          # Service version
    environment="production"   # Environment name
)
```

## ü§ù Contributing

Contributions welcome! This library aims to solve all Python logging problems once and for all.

1. Fork the repository
2. Create a feature branch
3. Add tests for your changes
4. Run the test suite: `python tests/test_basic.py`
5. Submit a pull request

## üìÑ License

MIT License - see LICENSE file for details.

## üôè Acknowledgments

Built with ‚ù§Ô∏è for the Python community. Inspired by the best features of existing logging libraries while solving their fundamental limitations.

---

**Made with ‚ù§Ô∏è by [Ajay Agrawal](mailto:ajay@micktrace.dev)**
